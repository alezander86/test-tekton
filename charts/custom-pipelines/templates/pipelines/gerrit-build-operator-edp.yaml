{{ if eq .Values.global.gitProvider "gerrit" }}
apiVersion: tekton.dev/v1beta1
kind: Pipeline
metadata:
  name: gerrit-go-other-app-build-edp
  labels:
    {{- include "edp-custom-pipelines.labels" . | nindent 4 }}
spec:
  workspaces:
    - name: shared-workspace
    - name: ssh-creds
  params:
    - name: pipelineUrl
      default: https://tekton-{{ .Release.Namespace }}.{{ .Values.global.dnsWildCard }}/#/namespaces/$(context.pipelineRun.namespace)/pipelineruns/$(context.pipelineRun.name)
      type: string
    - name: git-source-url
      default: "https://github.com/epmd-edp/go-go-beego"
      description: git url to clone
      type: string
    - name: git-source-revision
      description: 'git revision to checkout (branch, tag, sha, refâ€¦)'
      default: "master"
      type: string
    - name: SONAR_URL
      default: 'http://sonar.{{ .Release.Namespace }}:9000'
      description: SonarQube url for static code analysis
      type: string
    - name: NEXUS_URL
      default: 'http://nexus.{{ .Release.Namespace }}:8081'
      description: Nexus url
      type: string
    - name: CODEBASE_NAME
      default: "golang-go"
      description: "Project name"
      type: string
    - name: CODEBASEBRANCH_NAME
      description: "Codebasebranchname"
      type: string
    - name: go-image-version
      default: 'golang:1.18.4-bullseye'
      description: "go image with make installed"
      type: string
    - name: GOPROXY
      default: "http://athens-athens-proxy:80"
      description: "Go proxy link"
      type: string
    - name: changeNumber
      description: "Change number from Merge Request"
    - name: patchsetNumber
      description: "Patchset number from Merge Request"
    - name: TICKET_NAME_PATTERN
      description: "Ticket name pattern"
    - name: COMMIT_MESSAGE_PATTERN
      description: "Pattern to validate a commit message"
    - name: COMMIT_MESSAGE
      description: "Commit message"
    - name: JIRA_ISSUE_METADATA_PAYLOAD
      description: "Jira Payload"
  tasks:

{{- include "gerrit-build-start" . | nindent 4 }}

    - name: get-version
      taskRef:
        kind: Task
        name: get-version-edp
      runAfter:
        - init-values
      params:
        - name: CODEBASEBRANCH_NAME
          value: $(params.CODEBASEBRANCH_NAME)

{{ include "sonar-cleanup" . | nindent 4 }}

    - name: sast
      taskRef:
        kind: Task
        name: sast
      runAfter:
        - get-version
      params:
        - name: reportDataProductName
          value: $(tasks.init-values.results.TENANT_NAME)
        - name: reportDataEngagementName
          value: $(params.CODEBASEBRANCH_NAME)
      workspaces:
        - name: source
          workspace: shared-workspace

    - name: test
      taskRef:
        kind: Task
        name: golang
      runAfter:
        - sast
      params:
        - name: BASE_IMAGE
          value: $(params.go-image-version)
        - name: GOPROXY
          value: $(params.GOPROXY)
        - name: EXTRA_COMMANDS
          value: |
            make test
      workspaces:
        - name: source
          workspace: shared-workspace

    - name: sonar
      taskRef:
        kind: Task
        name: sonarqube-scanner
      runAfter:
        - test
      params:
        - name: SONAR_HOST_URL
          value: $(params.SONAR_URL)
        - name: SONAR_PROJECT_KEY
          value: $(params.CODEBASEBRANCH_NAME)
        - name: SONAR_PROJECT_NAME
          value: $(params.CODEBASEBRANCH_NAME)
      workspaces:
        - name: source
          workspace: shared-workspace

    - name: build
      taskRef:
        kind: Task
        name: golang
      runAfter:
        - sonar
      params:
        - name: BASE_IMAGE
          value: $(params.go-image-version)
        - name: GOPROXY
          value: $(params.GOPROXY)
        - name: EXTRA_COMMANDS
          value: |
            VERSION=$(tasks.get-version.results.VERSION) make build
      workspaces:
        - name: source
          workspace: shared-workspace

    - name: create-ecr-repository
      taskRef:
        kind: Task
        name: create-ecr-repository
      runAfter:
        - build
      params:
        - name: REPO_NAME
          value: "$(tasks.init-values.results.TENANT_NAME)/$(params.CODEBASE_NAME)"

    - name: kaniko-build
      taskRef:
        kind: Task
        name: kaniko
      runAfter:
        - create-ecr-repository
      params:
        - name: IMAGE
          value: "$(tasks.init-values.results.DOCKER_REGISTRY_HOST)/$(tasks.init-values.results.TENANT_NAME)/$(params.CODEBASE_NAME):$(tasks.get-version.results.IS_TAG)"
      workspaces:
        - name: source
          workspace: shared-workspace

    - name: ecr-to-docker
      taskRef:
        kind: Task
        name: ecr-to-docker
      runAfter:
        - kaniko-build
      params:
        - name: ECR_HOST
          value: "$(tasks.init-values.results.DOCKER_REGISTRY_HOST)"
        - name: ECR_IMAGE
          value: "$(tasks.init-values.results.DOCKER_REGISTRY_HOST)/$(tasks.init-values.results.TENANT_NAME)/$(params.CODEBASE_NAME)"
        - name: IMAGE_TAG
          value: "$(tasks.get-version.results.VERSION)"
        - name: CODEBASE_NAME
          value: "$(params.CODEBASE_NAME)"

    - name: push-to-jira
      taskRef:
        kind: Task
        name: push-to-jira
      runAfter:
        - ecr-to-docker
      params:
        - name: TICKET_NAME_PATTERN
          value: "$(params.TICKET_NAME_PATTERN)"
        - name: COMMIT_MESSAGE_PATTERN
          value: "$(params.COMMIT_MESSAGE_PATTERN)"
        - name: COMMIT_MESSAGE
          value: "$(params.COMMIT_MESSAGE)"
        - name: COMMIT_ID
          value: "$(tasks.fetch-repository.results.commit)"
        - name: JIRA_ISSUE_METADATA_PAYLOAD
          value: "$(params.JIRA_ISSUE_METADATA_PAYLOAD)"
        - name: CODEBASE_NAME
          value: "$(params.CODEBASE_NAME)"
        - name: PIPELINE_URL
          value: "$(params.pipelineUrl)"
        - name: VCS_TAG
          value: "$(tasks.get-version.results.VCS_TAG)"
        - name: VERSION
          value: "$(tasks.get-version.results.VERSION)"
      workspaces:
        - name: source
          workspace: shared-workspace

    - name: set-version
      taskRef:
        kind: Task
        name: set-version
      runAfter:
        - push-to-jira
      params:
        - name: IS_TAG
          value: $(tasks.get-version.results.IS_TAG)
      workspaces:
        - name: source
          workspace: shared-workspace

    - name: helm-push-gh-pages
      taskRef:
        kind: Task
        name: helm-push-gh-pages
      runAfter:
        - set-version
      params:
        - name: CODEBASE_NAME
          value: "$(params.CODEBASE_NAME)"
      workspaces:
        - name: source
          workspace: shared-workspace

    - name: git-tag
      taskRef:
        kind: Task
        name: git-cli
      runAfter:
        - helm-push-gh-pages
      params:Task
        - name: GIT_USER_EMAIL
          value: edp-ci@edp.ci-user
        - name: GIT_USER_NAME
          value: edp-ci
        - name: GIT_SCRIPT
          value: |
            git tag -a "$(tasks.get-version.results.VCS_TAG)" -m "Tag is added automatically by CI user"
            git push --tags
      workspaces:
        - name: source
          workspace: shared-workspace
        - name: ssh-directory
          workspace: ssh-creds

    - name: update-cbis
      taskRef:
        kind: Task
        name: update-cbis
      runAfter:
        - git-tag
      params:
        - name: CBIS_NAME
          value: $(tasks.init-values.results.RESULT_IMAGE_NAME)
        - name: IMAGE_TAG
          value: $(tasks.get-version.results.IS_TAG)
{{ end }}
